/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package andrea.tfg.panels;

import andrea.tfg.frames.VentanaPrincipalFrame;
import andrea.tfg.program.CurvaP256;
import andrea.tfg.program.CurvaSM2;
import andrea.tfg.program.CurvaSecp256k1;
import andrea.tfg.program.CurvaSecp256r1;
import andrea.tfg.program.FirmaMensaje1Curva;
import andrea.tfg.program.FirmaMensaje2Curvas;
import andrea.tfg.program.GenerarClaves;
import andrea.tfg.program.OperacionesString;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.WARNING_MESSAGE;

/**
 *
 * @author Andrea
 */
public class PanelPredeterminado extends javax.swing.JPanel {

    /**
     * Creates new form panelPrueba
     */
    public PanelPredeterminado() {
        initComponents();  
        
        //VentanaPrincipalFrame.DescargaFirmaAv.setVisible(false);
        //VentanaPrincipalFrame.DescargaMensajeAv.setVisible(false);
    }

    public String getMsg() {

        String msg = campoTextoMsgPred.getText();
        return msg;
    }
    
    /**
     *
     */
    public boolean seVe = false;
    public String firma = "";

    public boolean esVisible() {
        seVe = true;
       return seVe;
    }
    
    public String devolverFirma() {
        firma = campoTextoMsgPred.getText();
        return firma;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelFondoCurvas = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        botonSecp256k1 = new javax.swing.JRadioButton();
        botonP256 = new javax.swing.JRadioButton();
        botonSM2 = new javax.swing.JRadioButton();
        botonSecp256r1 = new javax.swing.JRadioButton();
        panelFondoMensaje = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        InputMensaje = new javax.swing.JTextArea();
        panelFondoFirma = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        BotonFirmar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        campoTextoMsgPred = new javax.swing.JTextArea();

        setForeground(new java.awt.Color(240, 240, 240));
        setPreferredSize(new java.awt.Dimension(1329, 1127));
        setRequestFocusEnabled(false);

        panelFondoCurvas.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        jLabel1.setText("  Seleccione dos curvas ");

        botonSecp256k1.setFont(new java.awt.Font("Cambria Math", 0, 12)); // NOI18N
        botonSecp256k1.setText("secp256k1");

        botonP256.setFont(new java.awt.Font("Cambria Math", 0, 12)); // NOI18N
        botonP256.setText("P-256");
        botonP256.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        botonP256.setPreferredSize(new java.awt.Dimension(73, 53));
        botonP256.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonP256ActionPerformed(evt);
            }
        });

        botonSM2.setFont(new java.awt.Font("Cambria Math", 0, 12)); // NOI18N
        botonSM2.setText("SM2");
        botonSM2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        botonSecp256r1.setFont(new java.awt.Font("Cambria Math", 0, 12)); // NOI18N
        botonSecp256r1.setText("secp256r1");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(botonP256, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(botonSM2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(botonSecp256r1)
                .addGap(41, 41, 41)
                .addComponent(botonSecp256k1)
                .addContainerGap(166, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonSecp256r1)
                    .addComponent(botonSM2)
                    .addComponent(botonP256, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonSecp256k1))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelFondoCurvasLayout = new javax.swing.GroupLayout(panelFondoCurvas);
        panelFondoCurvas.setLayout(panelFondoCurvasLayout);
        panelFondoCurvasLayout.setHorizontalGroup(
            panelFondoCurvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoCurvasLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(panelFondoCurvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(99, Short.MAX_VALUE))
        );
        panelFondoCurvasLayout.setVerticalGroup(
            panelFondoCurvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoCurvasLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        panelFondoMensaje.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        jLabel2.setText("  Introduzca el mensaje");

        InputMensaje.setBackground(new java.awt.Color(240, 240, 240));
        InputMensaje.setColumns(20);
        InputMensaje.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        InputMensaje.setRows(5);
        InputMensaje.setBorder(null);
        InputMensaje.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                InputMensajeFocusGained(evt);
            }
        });
        InputMensaje.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                InputMensajeInputMethodTextChanged(evt);
            }
        });
        jScrollPane1.setViewportView(InputMensaje);

        javax.swing.GroupLayout panelFondoMensajeLayout = new javax.swing.GroupLayout(panelFondoMensaje);
        panelFondoMensaje.setLayout(panelFondoMensajeLayout);
        panelFondoMensajeLayout.setHorizontalGroup(
            panelFondoMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoMensajeLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(panelFondoMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1154, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        panelFondoMensajeLayout.setVerticalGroup(
            panelFondoMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoMensajeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        panelFondoFirma.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        jLabel3.setText("  Resultado");

        BotonFirmar.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        BotonFirmar.setText("Firmar");
        BotonFirmar.setBorder(null);
        BotonFirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonFirmarActionPerformed(evt);
            }
        });

        campoTextoMsgPred.setEditable(false);
        campoTextoMsgPred.setBackground(new java.awt.Color(240, 240, 240));
        campoTextoMsgPred.setColumns(20);
        campoTextoMsgPred.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        campoTextoMsgPred.setRows(5);
        campoTextoMsgPred.setBorder(null);
        jScrollPane2.setViewportView(campoTextoMsgPred);

        javax.swing.GroupLayout panelFondoFirmaLayout = new javax.swing.GroupLayout(panelFondoFirma);
        panelFondoFirma.setLayout(panelFondoFirmaLayout);
        panelFondoFirmaLayout.setHorizontalGroup(
            panelFondoFirmaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoFirmaLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(panelFondoFirmaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BotonFirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1142, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelFondoFirmaLayout.setVerticalGroup(
            panelFondoFirmaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFondoFirmaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(BotonFirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelFondoCurvas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelFondoMensaje, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelFondoFirma, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(panelFondoCurvas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(panelFondoMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(panelFondoFirma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(483, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    private void InputMensajeInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_InputMensajeInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_InputMensajeInputMethodTextChanged

    private void InputMensajeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_InputMensajeFocusGained

    }//GEN-LAST:event_InputMensajeFocusGained

    private void botonP256ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonP256ActionPerformed

    }//GEN-LAST:event_botonP256ActionPerformed
    
    // Función que devuelve el mensaje firmado operando con una única curva.
    public String devolverFirma1Curva() throws NoSuchAlgorithmException {
        String res = "";

        // Utilizar isSelected para ver si el botón se ha presionado.
        if (botonP256.isSelected() == true) {
            CurvaP256 c = new CurvaP256();
            BigInteger n = c.getN();
            BigInteger a = c.getA();
            BigInteger[] P = c.getPxy();
            GenerarClaves cls = new GenerarClaves(P, a, n);
            String msg = InputMensaje.getText();
            BigInteger[] signature = FirmaMensaje1Curva.firmaMsj(msg, n, P, a, cls.getClavePrivada());
            System.out.println("Firma con P-256: " + OperacionesString.arrayToJSON(signature) + '\n');
            res = OperacionesString.arrayToJSON(signature);
        }

        if (botonSM2.isSelected() == true) {
            CurvaSM2 c = new CurvaSM2();
            BigInteger n = c.getN();
            BigInteger a = c.getA();
            BigInteger[] P = c.getPxy();
            GenerarClaves cls = new GenerarClaves(P, a, n);
            String msg = InputMensaje.getText();
            BigInteger[] signature = FirmaMensaje1Curva.firmaMsj(msg, n, P, a, cls.getClavePrivada());
            System.out.println("Firma con SM2: " + OperacionesString.arrayToJSON(signature) + '\n');
            res = OperacionesString.arrayToJSON(signature);
        }
        return res;
    }

    // Función que devuelve el mensaje firmado operando con dos curvas.
    public String devolverFirma2Curvas() throws NoSuchAlgorithmException {
        String res = "";
        String sacarMsg = "El mensaje es: ";

        /* TODO: OPTIMIZAR EL CÓDIGO. */
        
        // Utilizar isSelected para ver si el botón se ha presionado.
        // Aquí firmamos el mensaje si se selecciona el boton P256 y SM2.
        if (botonP256.isSelected() && botonSM2.isSelected() && !botonSecp256r1.isSelected() && !botonSecp256k1.isSelected()) {
            CurvaP256 c1 = new CurvaP256();
            CurvaSM2 c2 = new CurvaSM2();
            BigInteger n1 = c1.getN();
            BigInteger n2 = c2.getN();
            BigInteger a1 = c1.getA();
            BigInteger a2 = c2.getA();
            BigInteger[] P1 = c1.getPxy();
            BigInteger[] P2 = c2.getPxy();
            System.out.println("Generando el par de claves para P-256...........");
            GenerarClaves cls1 = new GenerarClaves(P1, a1, n1);
            System.out.println("Claves generdas para P-256!! \n");
            System.out.println("Generando el par de claves para SM2...........");
            GenerarClaves cls2 = new GenerarClaves(P2, a2, n2);
            System.out.println("Claves generdas para SM2!! \n");

            String msg = InputMensaje.getText();
            System.out.println(sacarMsg + msg + '\n');
            BigInteger[] signature = FirmaMensaje2Curvas.firmaMsj(msg, n1, n2, P1, P2, a1, a2, cls1.getClavePrivada(), cls2.getClavePrivada());
            System.out.println("Firma con P-256 y SM2: " + OperacionesString.arrayToJSON(signature) + '\n');
            res = OperacionesString.arrayToJSON(signature);
        }
        // Aquí firmamos el mensaje si se selecciona el boton P256 y secp256r1.
        if (botonP256.isSelected() && !botonSM2.isSelected() && botonSecp256r1.isSelected() && !botonSecp256k1.isSelected()) {
            CurvaP256 c1 = new CurvaP256();
            CurvaSecp256r1 c2 = new CurvaSecp256r1();
            BigInteger n1 = c1.getN();
            BigInteger n2 = c2.getN();
            BigInteger a1 = c1.getA();
            BigInteger a2 = c2.getA();
            BigInteger[] P1 = c1.getPxy();
            BigInteger[] P2 = c2.getPxy();
            System.out.println("Generando el par de claves para P-256...........");
            GenerarClaves cls1 = new GenerarClaves(P1, a1, n1);
            System.out.println("Claves generdas para P-256!! \n");
            System.out.println("Generando el par de claves para secp256r1...........");
            GenerarClaves cls2 = new GenerarClaves(P2, a2, n2);
            System.out.println("Claves generdas para secp256r1!! \n");

            String msg = InputMensaje.getText();
            System.out.println(sacarMsg + msg + '\n');
            BigInteger[] signature = FirmaMensaje2Curvas.firmaMsj(msg, n1, n2, P1, P2, a1, a2, cls1.getClavePrivada(), cls2.getClavePrivada());
            System.out.println("Firma con P-256 y secp256r1: " + OperacionesString.arrayToJSON(signature) + '\n');
            res = OperacionesString.arrayToJSON(signature);
        }       
        // Aquí firmamos el mensaje si se selecciona el boton P256 y secp256r1.
        if (!botonP256.isSelected() && botonSM2.isSelected() && botonSecp256r1.isSelected() && !botonSecp256k1.isSelected()) {
            CurvaSM2 c1 = new CurvaSM2();
            CurvaSecp256r1 c2 = new CurvaSecp256r1();
            BigInteger n1 = c1.getN();
            BigInteger n2 = c2.getN();
            BigInteger a1 = c1.getA();
            BigInteger a2 = c2.getA();
            BigInteger[] P1 = c1.getPxy();
            BigInteger[] P2 = c2.getPxy();
            System.out.println("Generando el par de claves para SM2...........");
            GenerarClaves cls1 = new GenerarClaves(P1, a1, n1);
            System.out.println("Claves generdas para SM2!! \n");
            System.out.println("Generando el par de claves para secp256r1...........");
            GenerarClaves cls2 = new GenerarClaves(P2, a2, n2);
            System.out.println("Claves generdas para secp256r1!! \n");

            String msg = InputMensaje.getText();
            System.out.println(sacarMsg + msg + '\n');
            BigInteger[] signature = FirmaMensaje2Curvas.firmaMsj(msg, n1, n2, P1, P2, a1, a2, cls1.getClavePrivada(), cls2.getClavePrivada());
            System.out.println("Firma con SM2 y secp256r1: " + OperacionesString.arrayToJSON(signature) + '\n');
            res = OperacionesString.arrayToJSON(signature);
        }
        // Aquí firmamos el mensaje si se selecciona el boton P256 y secp256k1.
        if (botonP256.isSelected() && !botonSM2.isSelected() && !botonSecp256r1.isSelected() && botonSecp256k1.isSelected()) {
            CurvaP256 c1 = new CurvaP256();
            CurvaSecp256k1 c2 = new CurvaSecp256k1();
            BigInteger n1 = c1.getN();
            BigInteger n2 = c2.getN();
            BigInteger a1 = c1.getA();
            BigInteger a2 = c2.getA();
            BigInteger[] P1 = c1.getPxy();
            BigInteger[] P2 = c2.getPxy();
            System.out.println("Generando el par de claves para P-256...........");
            GenerarClaves cls1 = new GenerarClaves(P1, a1, n1);
            System.out.println("Claves generdas para P-256!! \n");
            System.out.println("Generando el par de claves para secp256k1...........");
            GenerarClaves cls2 = new GenerarClaves(P2, a2, n2);
            System.out.println("Claves generdas para secp256k1!! \n");

            String msg = InputMensaje.getText();
            System.out.println(sacarMsg + msg + '\n');
            BigInteger[] signature = FirmaMensaje2Curvas.firmaMsj(msg, n1, n2, P1, P2, a1, a2, cls1.getClavePrivada(), cls2.getClavePrivada());
            System.out.println("Firma con P-256 y secp256k1: " + OperacionesString.arrayToJSON(signature) + '\n');
            res = OperacionesString.arrayToJSON(signature);
        }
        // Aquí firmamos el mensaje si se selecciona el boton SM2 y secp256k1.
        if (!botonP256.isSelected() && botonSM2.isSelected() && !botonSecp256r1.isSelected() && botonSecp256k1.isSelected()) {
            CurvaSM2 c1 = new CurvaSM2();
            CurvaSecp256k1 c2 = new CurvaSecp256k1();
            BigInteger n1 = c1.getN();
            BigInteger n2 = c2.getN();
            BigInteger a1 = c1.getA();
            BigInteger a2 = c2.getA();
            BigInteger[] P1 = c1.getPxy();
            BigInteger[] P2 = c2.getPxy();
            System.out.println("Generando el par de claves para SM2...........");
            GenerarClaves cls1 = new GenerarClaves(P1, a1, n1);
            System.out.println("Claves generdas para SM2!! \n");
            System.out.println("Generando el par de claves para secp256k1...........");
            GenerarClaves cls2 = new GenerarClaves(P2, a2, n2);
            System.out.println("Claves generdas para secp256k1!! \n");

            String msg = InputMensaje.getText();
            System.out.println(sacarMsg + msg + '\n');
            BigInteger[] signature = FirmaMensaje2Curvas.firmaMsj(msg, n1, n2, P1, P2, a1, a2, cls1.getClavePrivada(), cls2.getClavePrivada());
            System.out.println("Firma con SM2 y secp256k1: " + OperacionesString.arrayToJSON(signature) + '\n');
            res = OperacionesString.arrayToJSON(signature);
        }
        // Aquí firmamos el mensaje si se selecciona el boton secp256r1 y secp256k1.
        if (!botonP256.isSelected() && !botonSM2.isSelected() && botonSecp256r1.isSelected() && botonSecp256k1.isSelected()) {
            CurvaSecp256r1 c1 = new CurvaSecp256r1();
            CurvaSecp256k1 c2 = new CurvaSecp256k1();
            BigInteger n1 = c1.getN();
            BigInteger n2 = c2.getN();
            BigInteger a1 = c1.getA();
            BigInteger a2 = c2.getA();
            BigInteger[] P1 = c1.getPxy();
            BigInteger[] P2 = c2.getPxy();
            System.out.println("Generando el par de claves para secp256r1...........");
            GenerarClaves cls1 = new GenerarClaves(P1, a1, n1);
            System.out.println("Claves generdas para secp256r1!! \n");
            System.out.println("Generando el par de claves para secp256k1...........");
            GenerarClaves cls2 = new GenerarClaves(P2, a2, n2);
            System.out.println("Claves generdas para secp256k1!! \n");

            String msg = InputMensaje.getText();
            System.out.println(sacarMsg + msg + '\n');
            BigInteger[] signature = FirmaMensaje2Curvas.firmaMsj(msg, n1, n2, P1, P2, a1, a2, cls1.getClavePrivada(), cls2.getClavePrivada());
            System.out.println("Firma con secp256r1 y secp256k1: " + OperacionesString.arrayToJSON(signature) + '\n');
            res = OperacionesString.arrayToJSON(signature);
        }
        return res;
    }

    // Con este boton lo que hacemos es mostrar texto que pretende ser la firma.

    private void BotonFirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonFirmarActionPerformed
          
        String error = "ERROR: ";
        String aviso = "AVISO: ";
        // Este if se utiliza para lanzar un mensaje de error por no haber marcado ninguna curva.
        if (!botonP256.isSelected() && !botonSM2.isSelected() && !botonSecp256r1.isSelected() && !botonSecp256k1.isSelected()) {            
            Object msj = "No ha seleccionado ninguna curva, seleccione dos";
            System.out.println(error + msj+ '\n');
            JOptionPane.showMessageDialog(null, msj, "Error", ERROR_MESSAGE);
        }
        
        // Este if se utiliza para comprobar que solamente se seleccionan dos opciones y no tres.
        if ((botonP256.isSelected() && botonSM2.isSelected() && botonSecp256r1.isSelected() && !botonSecp256k1.isSelected())
                || (botonP256.isSelected() && botonSM2.isSelected() && botonSecp256k1.isSelected() && !botonSecp256r1.isSelected())
                || (botonSM2.isSelected() && botonSecp256r1.isSelected() && botonSecp256k1.isSelected() && !botonP256.isSelected())
                || (botonP256.isSelected() && botonSecp256r1.isSelected() && botonSecp256k1.isSelected() && !botonSM2.isSelected())) {
            Object msj1 = "Ha seleccionado tres curvas, seleccione dos";
            System.out.println(error + msj1+ '\n');
            JOptionPane.showMessageDialog(null, msj1, "Error", ERROR_MESSAGE);
        }
        
        // Este if se utiliza para comprobar que solamente se seleccionan dos opciones y no cuatro.
        if (botonP256.isSelected() && botonSM2.isSelected() && botonSecp256r1.isSelected() && botonSecp256k1.isSelected()) {
            Object msj2 = "Ha seleccionado cuatro curvas, seleccione dos";
            System.out.println(error + msj2+ '\n');
            JOptionPane.showMessageDialog(null, msj2, "Error", ERROR_MESSAGE);
        }
        
        // Este if sirve para comprobar que se seleccionan dos curvas y no una.
        if ((!botonP256.isSelected() && !botonSM2.isSelected() && !botonSecp256r1.isSelected() && botonSecp256k1.isSelected())
                || (!botonP256.isSelected() && !botonSM2.isSelected() && !botonSecp256k1.isSelected() && botonSecp256r1.isSelected())
                || (!botonSM2.isSelected() && !botonSecp256r1.isSelected() && !botonSecp256k1.isSelected() && botonP256.isSelected())
                || (!botonP256.isSelected() && !botonSecp256r1.isSelected() && !botonSecp256k1.isSelected() && botonSM2.isSelected())) {
            Object msj3 = "Ha seleccionado una curva, seleccione dos";
            System.out.println(error + msj3+ '\n');
            JOptionPane.showMessageDialog(null, msj3, "Error", ERROR_MESSAGE);
        }
        
        // Guardamos el mensaje que se firmara introducido por el usuario.
        String mensajeVacio = InputMensaje.getText();
        
        // Comprobamos que si seleccionamos dos curvas pero no se añade el mensaje para firmar --> aparece ventana de aviso.
        if (((botonP256.isSelected() && botonSM2.isSelected()  && !botonSecp256r1.isSelected() 
                && !botonSecp256k1.isSelected()) || (botonP256.isSelected() && !botonSM2.isSelected() && botonSecp256r1.isSelected()
                && !botonSecp256k1.isSelected()) || (!botonP256.isSelected() && botonSM2.isSelected() && botonSecp256r1.isSelected()
                && !botonSecp256k1.isSelected()) || (!botonP256.isSelected() && botonSM2.isSelected() && !botonSecp256r1.isSelected()
                && botonSecp256k1.isSelected()) || (!botonP256.isSelected() && !botonSM2.isSelected() && botonSecp256r1.isSelected()
                && botonSecp256k1.isSelected()) || (botonP256.isSelected() && !botonSM2.isSelected() && !botonSecp256r1.isSelected()
                && botonSecp256k1.isSelected())) && (mensajeVacio.isEmpty())) {
            Object msj4 = "No ha introducido el mensaje";
            System.out.println(aviso + msj4+ '\n');
            JOptionPane.showMessageDialog(null, msj4, "Aviso", WARNING_MESSAGE);
        }
        
        try {
            // El if lo utilizamos para que no salga ninguna firma si resulta que no introducimos el mensaje.           
            if (mensajeVacio.isEmpty()) {
                campoTextoMsgPred.setText("");
            } else {
                campoTextoMsgPred.setText(devolverFirma2Curvas());
            }
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(PanelPredeterminado.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BotonFirmarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonFirmar;
    public static javax.swing.JTextArea InputMensaje;
    private javax.swing.JRadioButton botonP256;
    private javax.swing.JRadioButton botonSM2;
    private javax.swing.JRadioButton botonSecp256k1;
    private javax.swing.JRadioButton botonSecp256r1;
    public static javax.swing.JTextArea campoTextoMsgPred;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panelFondoCurvas;
    public javax.swing.JPanel panelFondoFirma;
    private javax.swing.JPanel panelFondoMensaje;
    // End of variables declaration//GEN-END:variables
}
