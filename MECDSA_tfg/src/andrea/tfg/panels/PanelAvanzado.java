/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package andrea.tfg.panels;

import andrea.tfg.frames.VentanaPrincipalFrame;
import andrea.tfg.program.CurvaGenerica;
import andrea.tfg.program.VerificarFirma;
import andrea.tfg.program.FirmaMensaje2Curvas;
import andrea.tfg.program.GenerarClaves;
import andrea.tfg.program.OperacionesParamCurvas;
import andrea.tfg.program.OperacionesString;
import static andrea.tfg.program.OperacionesString.stringEsNumero;
import andrea.tfg.program.VerificarFirma;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import static javax.swing.JOptionPane.WARNING_MESSAGE;

/**
 *
 * @author Andrea
 */
public class PanelAvanzado extends javax.swing.JPanel {

    // Estas dos variables se utilizan para comprobar que se pulsan los botonos de confirmar parámetros
    // cuando se pulsa el botón de firmar.
    private boolean pulsadoConfirmar1 = false;
    private boolean pulsadoConfirmar2 = false;

    /**
     * Creates new form PanelAvanzado
     */
    public PanelAvanzado() {
        initComponents();
        
        //VentanaPrincipalFrame.DescargaFirma.setVisible(false);
        //VentanaPrincipalFrame.DescargaMensaje.setVisible(false);
        
        //VentanaPrincipalFrame.DescargaFirmaAv.setVisible(true);
        //VentanaPrincipalFrame.DescargaMensajeAv.setVisible(true);
    }

    ///////// Ver algoritmo de Schoof para obtener el orden de la curva.
    //////// Buscar libro Efficient Implementation of Schoof’s Algorithm.
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        a1C = new javax.swing.JTextField();
        b1C = new javax.swing.JTextField();
        p1C = new javax.swing.JTextField();
        Confirmar1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        a2C = new javax.swing.JTextField();
        b2C = new javax.swing.JTextField();
        p2C = new javax.swing.JTextField();
        Confirmar2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        InputMensaje = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        campoTextoMsgAv = new javax.swing.JTextArea();
        BotonFirmar = new javax.swing.JButton();

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        jLabel1.setText("Parámetros primera curva");

        a1C.setFont(new java.awt.Font("Cambria Math", 0, 12)); // NOI18N
        a1C.setText("Inserte parámetro a");
        a1C.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                a1CFocusGained(evt);
            }
        });

        b1C.setFont(new java.awt.Font("Cambria Math", 0, 12)); // NOI18N
        b1C.setText("Inserte parámetro b");
        b1C.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                b1CFocusGained(evt);
            }
        });

        p1C.setFont(new java.awt.Font("Cambria Math", 0, 12)); // NOI18N
        p1C.setText("Inserte parámetro p");
        p1C.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                p1CFocusGained(evt);
            }
        });

        Confirmar1.setFont(new java.awt.Font("Cambria Math", 0, 12)); // NOI18N
        Confirmar1.setText("Confirmar");
        Confirmar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Confirmar1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Cambria Math", 0, 18)); // NOI18N
        jLabel2.setText("Inserte parámetros deseados tamaño mínimo recomendado de 128 bits");

        jLabel3.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        jLabel3.setText("Parámetros segunda curva");

        a2C.setFont(new java.awt.Font("Cambria Math", 0, 12)); // NOI18N
        a2C.setText("Inserte parámetro a");
        a2C.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                a2CFocusGained(evt);
            }
        });

        b2C.setFont(new java.awt.Font("Cambria Math", 0, 12)); // NOI18N
        b2C.setText("Inserte parámetro b");
        b2C.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                b2CFocusGained(evt);
            }
        });

        p2C.setFont(new java.awt.Font("Cambria Math", 0, 12)); // NOI18N
        p2C.setText("Inserte parámetro p");
        p2C.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                p2CFocusGained(evt);
            }
        });

        Confirmar2.setFont(new java.awt.Font("Cambria Math", 0, 12)); // NOI18N
        Confirmar2.setText("Confirmar");
        Confirmar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Confirmar2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Confirmar1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(a1C)
                            .addComponent(b1C, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
                            .addComponent(p1C))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Confirmar2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(a2C)
                            .addComponent(b2C)
                            .addComponent(p2C, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(a1C, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(b1C, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(p1C, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Confirmar1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(a2C, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(b2C, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(p2C, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Confirmar2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel4.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        jLabel4.setText("  Introduzca el mensaje");

        InputMensaje.setBackground(new java.awt.Color(240, 240, 240));
        InputMensaje.setColumns(20);
        InputMensaje.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        InputMensaje.setRows(5);
        InputMensaje.setBorder(null);
        InputMensaje.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                InputMensajeFocusGained(evt);
            }
        });
        InputMensaje.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                InputMensajeInputMethodTextChanged(evt);
            }
        });
        jScrollPane1.setViewportView(InputMensaje);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 1017, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel5.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        jLabel5.setText("  Resultado");

        campoTextoMsgAv.setEditable(false);
        campoTextoMsgAv.setBackground(new java.awt.Color(240, 240, 240));
        campoTextoMsgAv.setColumns(20);
        campoTextoMsgAv.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        campoTextoMsgAv.setRows(5);
        campoTextoMsgAv.setBorder(null);
        jScrollPane2.setViewportView(campoTextoMsgAv);

        BotonFirmar.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        BotonFirmar.setText("Firmar");
        BotonFirmar.setBorder(null);
        BotonFirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonFirmarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BotonFirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(9, 9, 9)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BotonFirmar, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(57, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(51, 51, 51))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(109, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void Confirmar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Confirmar1ActionPerformed

        pulsadoConfirmar1 = true;
        String aS = a1C.getText();
        String bS = b1C.getText();
        String pS = p1C.getText();
        String error = "Inserte los valores de los parámetros.";
        String errorNoNumero = "Los valores introducidos tienen que ser numéricos.";

        // Comprobamos que los campos de texto de los parámetros no sean vacíos.
        if (aS.isEmpty() || bS.isEmpty() || pS.isEmpty()) {
            System.out.println("Error: " + error + '\n');
            JOptionPane.showMessageDialog(null, error, "Error", ERROR_MESSAGE);
        }

        // Comprobamos que los parámetros son números.
        if ((!stringEsNumero(aS) || !stringEsNumero(bS) || !stringEsNumero(pS))
                && !(aS.isEmpty() || bS.isEmpty() || pS.isEmpty())) {
            System.out.println("Error: " + errorNoNumero + '\n');
            JOptionPane.showMessageDialog(null, error, "Error", ERROR_MESSAGE);
        }

        BigInteger a = new BigInteger(aS);
        BigInteger b = new BigInteger(bS);
        BigInteger p = new BigInteger(pS);
        /* -------->>>> Método esPrimo muy lento, buscar otro. ---> Se comprueba en Sage.
         // Comprobamos que p es primo.
         if (!OperacionesParamCurvas.esPrimo(p)) {
         Object aviso = "El parámetro p introducido no es primo.";
         System.out.println("AVISO: " + aviso + '\n');
         JOptionPane.showMessageDialog(null, aviso, "Aviso", WARNING_MESSAGE);
         }
         */
        //// Aquí creamos un txt con los parámetros a, b y p que le pasaremos luego a Sage para obtener el pto base y 
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            fichero = new FileWriter("C:\\Users\\Andrea\\Documents\\NetBeansProjects\\ECDSA_tfg\\src\\andrea\\tfg\\sage\\paramPrimeraCurva.txt");
            pw = new PrintWriter(fichero);
            pw.println(a);
            pw.println(b);
            pw.println(p);
            System.out.println("Se ha creado correctamente el fichero");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        String correcto = "Los parámetros introducidos se han guradado correctamente.\n"
                + "Por favor ejecute el fichero GenerarCurvasMAvanzado.ipynb en sage antes de firmar.";
        System.out.println("Los parámetros introducidos son correctos \n");
        JOptionPane.showMessageDialog(null, correcto, "Información", INFORMATION_MESSAGE);
    }//GEN-LAST:event_Confirmar1ActionPerformed

    private void Confirmar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Confirmar2ActionPerformed

        pulsadoConfirmar2 = true;
        String aS = a2C.getText();
        String bS = b2C.getText();
        String pS = p2C.getText();

        String error = "Inserte los valores de los parámetros.";
        String errorNoNumero = "Los valores introducidos tienen que ser numéricos.";

        // Comprobamos que los campos de texto de los parámetros no sean vacíos.
        if (aS.isEmpty() || bS.isEmpty() || pS.isEmpty()) {
            System.out.println("Error: " + error + '\n');
            JOptionPane.showMessageDialog(null, error, "Error", ERROR_MESSAGE);
        }

        // Comprobamos que los parámetros son números.
        if ((!stringEsNumero(aS) || !stringEsNumero(bS) || !stringEsNumero(pS))
                && !(aS.isEmpty() || bS.isEmpty() || pS.isEmpty())) {
            System.out.println("Error: " + errorNoNumero + '\n');
            JOptionPane.showMessageDialog(null, error, "Error", ERROR_MESSAGE);
        }

        BigInteger a = new BigInteger(aS);
        BigInteger b = new BigInteger(bS);
        BigInteger p = new BigInteger(pS);
        /* -------->>>> Método esPrimo muy lento, buscar otro.
         // Comprobamos que p es primo.
         if (!OperacionesParamCurvas.esPrimo(p)) {
         Object aviso = "El parámetro p introducido no es primo.";
         System.out.println("AVISO: " + aviso + '\n');
         JOptionPane.showMessageDialog(null, aviso, "Aviso", WARNING_MESSAGE);
         }
         */
        //// Aquí creamos un txt con los parámetros a, b y p que le pasaremos luego a Sage para obtener el pto base y 
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            fichero = new FileWriter("C:\\Users\\Andrea\\Documents\\NetBeansProjects\\ECDSA_tfg\\src\\andrea\\tfg\\sage\\paramSegundaCurva.txt");
            pw = new PrintWriter(fichero);
            pw.println(a);
            pw.println(b);
            pw.println(p);
            System.out.println("Se ha creado correctamente el fichero");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        String correcto = "Los parámetros introducidos se han guradado correctamente\n"
                + "Por favor ejecute el fichero GenerarCurvasMAvanzado.ipynb en sage antes de firmar.";
        System.out.println("Los parámetros introducidos son correctos \n");
        JOptionPane.showMessageDialog(null, correcto, "Información", INFORMATION_MESSAGE);
    }//GEN-LAST:event_Confirmar2ActionPerformed

    private void InputMensajeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_InputMensajeFocusGained

    }//GEN-LAST:event_InputMensajeFocusGained

    private void InputMensajeInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_InputMensajeInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_InputMensajeInputMethodTextChanged

    // Método que realiza la firma una vez que se pulsa el botón de firmar con comprobaciones previas.
    private void BotonFirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonFirmarActionPerformed

        try {
            if ((pulsadoConfirmar1 == false || pulsadoConfirmar2 == false)
                    && (!a1C.getText().isEmpty() && !b1C.getText().isEmpty() && !p1C.getText().isEmpty())
                    && (!a2C.getText().isEmpty() && !b2C.getText().isEmpty() && !p2C.getText().isEmpty())
                    && !InputMensaje.getText().isEmpty()) {
                String avisoPulsar = "Pulse el botón confirmar para revisar que los parámetros son correctos.";
                System.out.println(avisoPulsar);
                JOptionPane.showMessageDialog(null, avisoPulsar, "Aviso", WARNING_MESSAGE);
            }

            String aS1 = a1C.getText();
            String bS1 = b1C.getText();
            String pS1 = p1C.getText();
            String aS2 = a2C.getText();
            String bS2 = b2C.getText();
            String pS2 = p2C.getText();

            String aDefault = "Inserte parámetro a";
            String bDefault = "Inserte parámetro b";
            String pDefault = "Inserte parámetro p";

            // Comprobamos que se escribió el mensaje para firmar.
            if (InputMensaje.getText().isEmpty()) {
                String error = "No ha introducido el mensaje.";
                System.out.println("Error: " + error + '\n');
                JOptionPane.showMessageDialog(null, error, "Error", ERROR_MESSAGE);
            }

            // Comprobamos que si se escribió mensaje pero no hay paramtros --> mensaje error.
            if (!InputMensaje.getText().isEmpty() && (((aS1.isEmpty() || bS1.isEmpty() || pS1.isEmpty())
                    || (aS2.isEmpty() || bS2.isEmpty() || pS2.isEmpty()))
                    || ((aS1.equalsIgnoreCase(aDefault) || (bS1.equalsIgnoreCase(bDefault)) || (pS1.equalsIgnoreCase(pDefault))))
                    || (aS2.equalsIgnoreCase(aDefault) || (bS2.equalsIgnoreCase(bDefault)) || (pS2.equalsIgnoreCase(pDefault))))) {
                String error = "No ha introducido los parámetros.";
                System.out.println("Error: " + error + '\n');
                JOptionPane.showMessageDialog(null, error, "Error", ERROR_MESSAGE);
            }

            // Firmamos con los parámetros de la curva y el mensaje.
            // Obtenemos los parámetros pasados por el usuario.
            BigInteger p1 = new BigInteger(p1C.getText());
            BigInteger a1 = new BigInteger(a1C.getText());
            BigInteger b1 = new BigInteger(b1C.getText());
            BigInteger p2 = new BigInteger(p2C.getText());
            BigInteger a2 = new BigInteger(a2C.getText());
            BigInteger b2 = new BigInteger(b2C.getText());
            BigInteger n1 = null, n2 = null;
            BigInteger x1 = null, x2 = null;
            BigInteger y1 = null, y2 = null;

            // Inicializamos las variables necesarias para poder abrir los ficheros generados en sage.
            File archivo = null;
            FileReader fr = null;
            BufferedReader br = null;

            try {
                // Apertura del fichero y creacion de BufferedReader para poder
                // hacer una lectura comoda (disponer del metodo readLine(). El fichero es el generado por
                // sage con el orden y pto base de la primera curva.
                archivo = new File("C:\\Users\\Andrea\\Documents\\NetBeansProjects\\ECDSA_tfg\\src\\andrea\\tfg\\sage\\ordenPtoBPrimeraCurva.txt");
                fr = new FileReader(archivo);
                br = new BufferedReader(fr);

                // Lectura del fichero que contiene datos primera curva.
                n1 = new BigInteger(br.readLine());
                System.out.println("El orden vale: " + n1);
                x1 = new BigInteger(br.readLine());
                System.out.println("La coordenada x vale: " + x1);
                y1 = new BigInteger(br.readLine());
                System.out.println("La coordenada y vale: " + y1 + "\n");

                // Indicamos la ruta del archivo ordenPtoBSegundaCurva.txt
                archivo = new File("C:\\Users\\Andrea\\Documents\\NetBeansProjects\\ECDSA_tfg\\src\\andrea\\tfg\\sage\\ordenPtoBSegundaCurva.txt");
                fr = new FileReader(archivo);
                br = new BufferedReader(fr);

                // Lectura del fichero que contiene datos segunda curva.
                n2 = new BigInteger(br.readLine());
                System.out.println("El orden vale: " + n2);
                x2 = new BigInteger(br.readLine());
                System.out.println("La coordenada x vale: " + x2);
                y2 = new BigInteger(br.readLine());
                System.out.println("La coordenada y vale: " + y2 + "\n");

                /* En este bucle imprimimos todo lo que contiene el fichero.
                 String linea;
                 while ((linea = br.readLine()) != null) {
                 System.out.println(linea);
                 }
                 */
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                // En el finally cerramos el fichero, para asegurarnos
                // que se cierra tanto si todo va bien como si salta
                // una excepcion.
                try {
                    if (null != fr) {
                        fr.close();
                    }
                } catch (Exception e2) {
                    e2.printStackTrace();
                }
            }

            // Aquí creamos las dos curvas y finalmente firmamos.
            String msj = InputMensaje.getText();
            CurvaGenerica c1 = new CurvaGenerica(p1, n1, a1, b1, x1, y1);
            CurvaGenerica c2 = new CurvaGenerica(p2, n2, a2, b2, x2, y2);
            BigInteger[] PB1 = new BigInteger[2], PB2 = new BigInteger[2];
            PB1[0] = x1;
            PB1[1] = y1;
            PB2[0] = x2;
            PB2[1] = y2;
            try {
            GenerarClaves clvs1 = new GenerarClaves(PB1, a1, n1);
            GenerarClaves clvs2 = new GenerarClaves(PB2, a2, n2);

            BigInteger[] firma = FirmaMensaje2Curvas.firmaMsj(msj, n1, n2, PB1, PB2, a1, a2, clvs1.getClavePrivada(), clvs2.getClavePrivada());
            System.out.println("Firma con curvas: " + OperacionesString.arrayToJSON(firma) + '\n');
            if (!InputMensaje.getText().isEmpty() && pulsadoConfirmar1 == true && pulsadoConfirmar2 == true) {
                campoTextoMsgAv.setText(OperacionesString.arrayToJSON(firma));
            }
            
            System.out.println(VerificarFirma.verificacion(InputMensaje.getText(), firma, c1.getN(), c2.getN(),
                c1.getA(), c2.getA(), PB1, PB2, clvs1.getClavePublica(), clvs2.getClavePublica()));
            
            } catch (ArithmeticException e) {
            String errorAritmInevr = "Se ha producido un error en las operaciones, el orden no es invertible.";
            JOptionPane.showMessageDialog(null, errorAritmInevr, "Error", ERROR_MESSAGE);
            }
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(PanelAvanzado.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_BotonFirmarActionPerformed

    // Con este evento hacemos que cuando se centre el cursor en el campo de texto
    // de la variable a1C se seleccione todo el texto.
    private void a1CFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_a1CFocusGained
        Object o = evt.getSource();
        if (o instanceof javax.swing.JTextField) {
            javax.swing.JTextField txt = (javax.swing.JTextField) o;
            txt.setSelectionStart(0);
            txt.setSelectionEnd(txt.getText().length());
        }
    }//GEN-LAST:event_a1CFocusGained

    // Con este evento hacemos que cuando se centre el cursor en el campo de texto
    // de la variable a1C se seleccione todo el texto.
    private void b1CFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_b1CFocusGained
        Object o = evt.getSource();
        if (o instanceof javax.swing.JTextField) {
            javax.swing.JTextField txt = (javax.swing.JTextField) o;
            txt.setSelectionStart(0);
            txt.setSelectionEnd(txt.getText().length());
        }
    }//GEN-LAST:event_b1CFocusGained

    // Con este evento hacemos que cuando se centre el cursor en el campo de texto
    // de la variable a1C se seleccione todo el texto.
    private void p1CFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_p1CFocusGained
        Object o = evt.getSource();
        if (o instanceof javax.swing.JTextField) {
            javax.swing.JTextField txt = (javax.swing.JTextField) o;
            txt.setSelectionStart(0);
            txt.setSelectionEnd(txt.getText().length());
        }
    }//GEN-LAST:event_p1CFocusGained

    // Con este evento hacemos que cuando se centre el cursor en el campo de texto
    // de la variable a1C se seleccione todo el texto.
    private void a2CFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_a2CFocusGained
        Object o = evt.getSource();
        if (o instanceof javax.swing.JTextField) {
            javax.swing.JTextField txt = (javax.swing.JTextField) o;
            txt.setSelectionStart(0);
            txt.setSelectionEnd(txt.getText().length());
        }
    }//GEN-LAST:event_a2CFocusGained

    // Con este evento hacemos que cuando se centre el cursor en el campo de texto
    // de la variable a1C se seleccione todo el texto.
    private void b2CFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_b2CFocusGained
        Object o = evt.getSource();
        if (o instanceof javax.swing.JTextField) {
            javax.swing.JTextField txt = (javax.swing.JTextField) o;
            txt.setSelectionStart(0);
            txt.setSelectionEnd(txt.getText().length());
        }
    }//GEN-LAST:event_b2CFocusGained

    // Con este evento hacemos que cuando se centre el cursor en el campo de texto
    // de la variable a1C se seleccione todo el texto.
    private void p2CFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_p2CFocusGained
        Object o = evt.getSource();
        if (o instanceof javax.swing.JTextField) {
            javax.swing.JTextField txt = (javax.swing.JTextField) o;
            txt.setSelectionStart(0);
            txt.setSelectionEnd(txt.getText().length());
        }
    }//GEN-LAST:event_p2CFocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonFirmar;
    private javax.swing.JButton Confirmar1;
    private javax.swing.JButton Confirmar2;
    public static javax.swing.JTextArea InputMensaje;
    private javax.swing.JTextField a1C;
    private javax.swing.JTextField a2C;
    private javax.swing.JTextField b1C;
    private javax.swing.JTextField b2C;
    public static javax.swing.JTextArea campoTextoMsgAv;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField p1C;
    private javax.swing.JTextField p2C;
    // End of variables declaration//GEN-END:variables
}
